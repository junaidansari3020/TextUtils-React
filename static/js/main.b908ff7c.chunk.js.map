{"version":3,"sources":["components/Alert.js","components/Navbar.js","components/TextForm.js","App.js","reportWebVitals.js","index.js"],"names":["Alert","props","alert","react_default","a","createElement","className","concat","type","role","word","lower","toLowerCase","charAt","toUpperCase","slice","capitalize","msg","Navbar","mode","href","title","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","onClick","toggleMode","htmlFor","TextForm","_useState","useState","_useState2","Object","slicedToArray","text","setText","Fragment","style","color","heading","value","onChange","event","target","backgroundColor","rows","newText","showAlert","SpeechSynthesisUtterance","window","speechSynthesis","speak","document","getElementById","select","navigator","clipboard","writeText","myArray","split","join","length","defaultProps","aboutText","App","setMode","_useState3","_useState4","setAlert","message","setTimeout","body","components_Alert","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.b908ff7c.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction Alert(props) {\r\n\r\n    const capitalize = (word)=>{\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n\r\n    return (\r\n        //if 'props.alert' is not null return this div.\r\n        props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n            <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Alert","//I got this by typing rfc means react function component while typing you will see intellisence.\r\n\r\nimport React from 'react'\r\nimport PropTypes from 'prop-types'\r\n// import { Link } from 'react-router-dom';\r\n\r\n//props is properties. ismein koi variable define karke hum uska value yahaan use karte hai\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n      <div className=\"container-fluid\">\r\n        <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n        <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              {/* <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link> */}\r\n              <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n            </li>\r\n            {/* <li className=\"nav-item\">\r\n              <Link className=\"nav-link\" to=\"/about\">{props.aboutText}</Link>\r\n            </li> */}\r\n          </ul>\r\n          {/* <form className=\"d-flex\">\r\n            <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n            <button className=\"btn btn-outline-primary\" type=\"submit\">Search</button>\r\n          </form> */}\r\n          <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n            <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\" />\r\n            <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable DarkMode</label>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  )\r\n}\r\n\r\n// yahaan title, aboutText ka data type declare kardiya so that future mein galti se string ke jagah number ya object na bhejdoon.\r\nNavbar.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  aboutText: PropTypes.string.isRequired\r\n}\r\n\r\n// Specifies the default values for props: waise toh main props ka istemaal karne wala hoon par agar props ka istemaal na karoon toh bydefault inn value ko istemaal karlena.\r\nNavbar.defaultProps = {\r\n  title: 'Set title here',\r\n  aboutText: 'About text here'\r\n};","//I got this by typing rfc means react function component while typing you will see intellisence.\r\n\r\nimport React, {useState} from 'react';\r\n\r\n//mera ek variable hai 'text' jiski default value hai 'Enter text here' aur jab bhi main iska text update karoonga tab main iss function ke through karoonga setText. \r\n\r\nexport default function TextForm(props) {\r\n    const handleUpClick = ()=>{\r\n        // console.log('Uppercase was clicked ' + text);\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to uppercase!\", \"success\");\r\n    }\r\n\r\n    const handleLoClick = ()=>{\r\n        let newText = text.toLowerCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to lowercase!\", \"success\");\r\n    }\r\n\r\n    //Text box ko clear karta hai.\r\n    const handleClearClick = ()=>{\r\n        let newText = '';\r\n        setText(newText);\r\n        props.showAlert(\"Text Cleared.\", \"success\");\r\n\r\n    }\r\n\r\n    //Text ko sound mein convert karta hai, aur bolta hai.\r\n    const speak = () => {\r\n        let msg = new SpeechSynthesisUtterance();\r\n        msg.text = text;\r\n        window.speechSynthesis.speak(msg);\r\n        props.showAlert(\"Text to speech is enabled.\", \"success\");\r\n\r\n    }\r\n\r\n    const handleOnChange = (event)=>{\r\n        // console.log('on change');\r\n        setText(event.target.value);\r\n    }\r\n\r\n     //Text box mein se text clipboard mein copy karta hai.\r\n    const handleCopy = ()=>{\r\n        let text = document.getElementById('myBox');\r\n        text.select();\r\n        navigator.clipboard.writeText(text.value);\r\n        props.showAlert(\"Copied to clipboard.\", \"success\");\r\n\r\n    }\r\n\r\n     //Text box mein se Extra Spaces remove karta hai.\r\n    const handleExtraSpaces = ()=>{\r\n        let myArray = text.split(/[ ]+/);\r\n        setText(myArray.join(\" \"));\r\n        props.showAlert(\"Extra spaces removed.\", \"success\");\r\n\r\n    }\r\n\r\n    const [text, setText] = useState('');\r\n    // text = \"new text\";  //wrong way to change the state\r\n    // setText(\"new text\");  //correct way to change the state\r\n\r\n    return (\r\n        <>\r\n        <div className=\"container\" style={{color: props.mode==='dark'?'white':'black'}}>\r\n            <h1>{props.heading}</h1>\r\n            <div className=\"mb-3\">\r\n                {/* {kyunki hum yahaa state variable 'value={text}' use kar rahe hain iss liye hum 'onChange' event ko listen kar rahe hai. nahi toh hum textarea mein type nahin kar paate.} */}\r\n                <textarea className=\"form-control\" value={text} onChange={handleOnChange} style={{backgroundColor: props.mode==='dark'?'grey':'white', color: props.mode==='dark'?'white':'black'}} id=\"myBox\" rows=\"8\"></textarea>\r\n            </div>\r\n            <button className=\"btn btn-primary mx-2 my-2\" onClick={handleUpClick}>Convert to Uppercase</button>\r\n            <button className=\"btn btn-primary mx-2 my-2\" onClick={handleLoClick}>Convert to Lowercase</button>\r\n            <button className=\"btn btn-primary mx-2 my-2\" onClick={handleClearClick}>Clear Text</button>\r\n            <button className=\"btn btn-primary mx-2 my-2\" onClick={speak}>Speak</button>\r\n            <button className=\"btn btn-primary mx-2 my-2\" onClick={handleCopy}>Copy Text</button>\r\n            <button className=\"btn btn-primary mx-2 my-2\" onClick={handleExtraSpaces}>Remove Extra Spaces</button>\r\n        </div>\r\n        <div className=\"container my-3\" style={{color: props.mode==='dark'?'white':'black'}}>\r\n            <h2>Your text summary:</h2>\r\n            <p>{text.split(\" \").length} words, {text.length} characters.</p>\r\n            <p>{(0.008 * text.split(\" \").length)} Minutes to read.</p>\r\n            <h2>Preview:</h2>\r\n            <p id=\"justify\">{text.length>0?text:\"Enter something in the textbox above to preview it here.\"}</p>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","import React, { useState } from 'react';\nimport './App.css';\nimport Alert from './components/Alert';\n// import About from './components/About';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route\n// } from \"react-router-dom\";\n\n\n//function based component.\nfunction App() {\n  const [mode, setMode] = useState('light');  //whether darkmode is enabled or not.\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type\n    })\n\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n  }\n\n  const toggleMode = () => {\n    if (mode === 'light') {\n      setMode('dark');\n      document.body.style.backgroundColor = '#042743';\n      showAlert(\"Dark mode has been enabled.\", \"success\");\n      document.title = 'TextUtils - Dark mode';\n\n      // setInterval(() => {\n      //   document.title = 'TextUtils is Amazing';\n      // }, 1000);\n\n      // setInterval(() => {\n      //   document.title = 'Install TextUtils Now';\n      // }, 2000);\n\n    }\n    else {\n      setMode('light');\n      document.body.style.backgroundColor = 'white';\n      showAlert(\"Light mode has been enabled.\", \"success\");\n      document.title = 'TextUtils - Light mode';\n    }\n  }\n\n  return (\n    <>\n      {/* <Router> */}\n        <Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode} />\n        <Alert alert={alert} />\n        <div className=\"container my-3\">\n          {/* <Switch> */}\n            {/* <Route exact path=\"/about\">\n              <About />\n            </Route> */}\n            {/* <Route exact path=\"/\"> */}\n              <TextForm showAlert={showAlert} heading=\"Enter the text to analyze below:\" mode={mode} />\n            {/* </Route> */}\n          {/* </Switch> */}\n        </div>\n      {/* </Router> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}